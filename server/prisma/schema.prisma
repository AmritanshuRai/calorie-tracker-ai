// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  picture   String?
  googleId  String?  @unique
  
  // Profile status
  profileCompleted Boolean @default(false)
  
  // Admin flag
  isAdmin   Boolean @default(false)
  
  // Subscription fields
  subscriptionStatus   String   @default("free") // free, active, cancelled, expired
  subscriptionPlan     String?  // monthly, annual
  subscriptionStart    DateTime?
  subscriptionEnd      DateTime?
  freeLogs             Int      @default(15) // Free logs remaining
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  foodEntries       FoodEntry[]
  onboardingHistory UserOnboarding[]
  openaiLogs        OpenAILog[]
  subscriptions     Subscription[]
  payments          Payment[]
  
  @@index([email])
  @@index([googleId])
  @@index([isAdmin])
  @@index([subscriptionStatus])
}

model UserOnboarding {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Onboarding data snapshot
  gender           String?
  age              Int?
  height           Float?  // in cm
  goal             String? // weight_loss, improved_health, weight_gain
  currentWeight    Float?
  targetWeight     Float?
  targetDate       DateTime?
  activityLevel    String?
  activityMultiplier Float?
  
  // Diet and Health preferences
  dietPreference          String? // ai_recommended, balanced, mediterranean, keto, etc.
  healthConditions        String[] @default([]) // Array of condition IDs
  customHealthConditions  String[] @default([]) // Array of custom condition strings
  
  // Women-specific health data
  pregnancyStatus  String? // none, pregnant, lactating, both
  trimester        String? // first, second, third
  menstrualCycle   String? // regular, heavy, irregular, none
  
  // Lifestyle factors
  smokingStatus       String? // never, former, current
  cigarettesPerDay    Int?
  alcoholFrequency    String? // never, rarely, moderate, regular, daily
  drinksPerOccasion   Int?
  caffeineIntake      String? // none, low, moderate, high
  
  // Environmental factors
  sunExposure      String? // minimal, moderate, adequate, high
  climate          String? // hot_humid, hot_dry, moderate, cold, very_cold
  skinTone         String? // very_fair, fair, medium, olive, brown, dark_brown, very_dark
  
  // Health metrics
  sleepHours       Float?
  stressLevel      String? // low, moderate, high, severe
  waterIntake      Float?  // liters per day
  
  // Medical information
  medications            String[] @default([]) // Array of medication types
  previousDeficiencies   String[] @default([]) // Array of known deficiencies
  
  // Exercise details
  exerciseTypes     String[] @default([])
  exerciseIntensity String? // light, moderate, vigorous, very_vigorous
  
  // Calculated values at the time
  bmr                    Int?
  tdee                   Int?
  dailyCalorieTarget     Int?
  targetWeightChangeRate Float?
  proteinTarget          Int?
  carbsTarget            Int?
  fatsTarget             Int?
  
  // Micronutrient targets
  vitaminATarget    Float?
  vitaminCTarget    Float?
  vitaminDTarget    Float?
  vitaminETarget    Float?
  vitaminKTarget    Float?
  vitaminB1Target   Float?
  vitaminB2Target   Float?
  vitaminB3Target   Float?
  vitaminB5Target   Float?
  vitaminB6Target   Float?
  vitaminB9Target   Float?
  vitaminB12Target  Float?
  calciumTarget     Float?
  ironTarget        Float?
  magnesiumTarget   Float?
  phosphorusTarget  Float?
  potassiumTarget   Float?
  sodiumTarget      Float?
  zincTarget        Float?
  seleniumTarget    Float?
  copperTarget      Float?
  manganeseTarget   Float?
  
  // Metadata
  completedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  
  @@index([userId])
  @@index([completedAt])
}

model FoodEntry {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Entry details
  date        DateTime @default(now())
  mealType    String   // breakfast, lunch, dinner, snacks
  foodName    String
  description String?
  
  // Nutrition data
  calories    Float
  protein     Float
  carbs       Float
  fats        Float
  
  // Optional detailed nutrients
  cholesterol Float?
  omega3      Float?
  fiber       Float?
  water       Float?
  sodium      Float?
  sugar       Float?
  transFat    Float?
  caffeine    Float?
  alcohol     Float?
  
  // Vitamins
  vitaminA    Float?
  vitaminC    Float?
  vitaminD    Float?
  vitaminE    Float?
  vitaminK    Float?
  vitaminB1   Float? // Thiamine
  vitaminB2   Float? // Riboflavin
  vitaminB3   Float? // Niacin
  vitaminB5   Float? // Pantothenic acid
  vitaminB6   Float? // Pyridoxine
  vitaminB9   Float? // Folate
  vitaminB12  Float? // Cobalamin
  
  // Minerals
  calcium     Float?
  iron        Float?
  magnesium   Float?
  phosphorus  Float?
  potassium   Float?
  zinc        Float?
  manganese   Float?
  copper      Float?
  selenium    Float?
  
  // Metadata
  source      String?  // text, voice, image, barcode, label
  aiParsed    Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
  @@index([date])
  @@index([userId, date])
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
  
  @@index([expiresAt])
}

model OpenAILog {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Request details
  model             String   // gpt-5, gpt-4o, gpt-4-turbo, etc.
  requestType       String   // text, voice, image, embedding
  input             String   @db.Text // User input or prompt
  rawOutput         String?  @db.Text // Raw response from OpenAI
  
  // Token usage
  inputTokens       Int?     // Prompt tokens
  outputTokens      Int?     // Completion tokens
  totalTokens       Int?     // Total tokens used
  
  // Cost tracking (in USD)
  inputCost         Float?   // Cost for input tokens
  outputCost        Float?   // Cost for output tokens
  totalCost         Float?   // Total cost for this request
  
  // Performance metrics
  responseTimeMs    Int?     // Time taken to get response in milliseconds
  
  // Additional metadata
  status            String   @default("success") // success, error, timeout
  errorMessage      String?  @db.Text
  endpoint          String?  // /api/food/parse, /api/chat, etc.
  reasoningEffort   String?  // minimal, medium, high (for reasoning models)
  
  // Timestamps
  createdAt         DateTime @default(now())
  
  @@index([userId])
  @@index([createdAt])
  @@index([model])
  @@index([requestType])
  @@index([status])
  @@index([userId, createdAt])
}

model Subscription {
  id                    String   @id @default(cuid())
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Subscription details
  plan                  String   // monthly, annual
  status                String   @default("active") // active, cancelled, expired, paused
  amount                Float    // Amount paid in INR
  currency              String   @default("INR")
  
  // Subscription period
  startDate             DateTime @default(now())
  endDate               DateTime
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  
  // Billing
  nextBillingDate       DateTime?
  cancelledAt           DateTime?
  cancelReason          String?
  
  // Metadata
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([userId])
  @@index([status])
  @@index([endDate])
}

model Payment {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Payment details
  amount              Float    // Amount in INR
  currency            String   @default("INR")
  status              String   // created, authorized, captured, refunded, failed
  method              String?  // card, netbanking, wallet, upi
  
  // Order details
  orderType           String   // subscription, one-time
  plan                String?  // monthly, annual (if subscription)
  description         String?
  
  // Payment reference
  paymentReference    String   @unique
  
  // Receipt and invoice
  receipt             String?
  notes               Json?    // Additional metadata
  
  // Refund details
  refundedAmount      Float?
  refundedAt          DateTime?
  refundReason        String?
  
  // Failure details
  errorCode           String?
  errorDescription    String?
  
  // Timestamps
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@index([userId])
  @@index([status])
  @@index([paymentReference])
  @@index([createdAt])
}
